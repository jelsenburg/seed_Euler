/*****************************************************************************/
//  HighLevelExample.ino
//  Hardware:      Grove - 6-Axis Accelerometer&Gyroscope
//	Arduino IDE:   Arduino-1.65
//	Author:	       Lambor
//	Date: 	       Oct,2015
//	Version:       v1.0
//
//  Modified by:
//  Data:
//  Description:
//
//	by www.seeedstudio.com
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
//
/*******************************************************************************/

#include "LSM6DS3.h"
#include "Wire.h"
#include "math.h"

//Create a instance of class LSM6DS3
LSM6DS3 myIMU(I2C_MODE, 0x6A);    //I2C device address 0x6A
const int myIMU_addr = 0x68;
int16_t AcX, AcY, AcZ, Tmp, GyX, GyY, GyZ;

int minVal = 265;
int maxVal = 402;

double x;
double y;
double z;

void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  while (!Serial);
//  Call .begin() to configure the IMUs
  if (myIMU.begin() != 0) {
    Serial.println("Device error");
  } else {
    Serial.println("Device OK!");
  }
}

//void loop() {
//  AcX = myIMU.readFloatAccelX(); //<<8|Wire.read();
//  AcY = myIMU.readFloatAccelY(); //<<8|Wire.read();
//  AcZ = myIMU.readFloatAccelZ(); // <<8|Wire.read();
//
//  int xAng = map(AcX, minVal, maxVal, -90, 90);
//  int yAng = map(AcY, minVal, maxVal, -90, 90);
//  int zAng = map(AcZ, minVal, maxVal, -90, 90);
//
//  x = RAD_TO_DEG * (atan2(-yAng, -zAng) + PI);
//  y = RAD_TO_DEG * (atan2(-xAng, -zAng) + PI);
//  z = RAD_TO_DEG * (atan2(-yAng, -xAng) + PI);
//
//  Serial.print("AngleX= ");
//  Serial.println(x);
//
//  Serial.print("AngleY= ");
//  Serial.println(y);
//
//  Serial.print("AngleZ= ");
//  Serial.println(z);
//  Serial.println("-----------------------------------------");
//  delay(5000);
//}
void calc_xy_angles(void) {
  // Using x y and z from accelerometer, calculate x and y angles
  float x_val, y_val, z_val, result;
  uint16_t x2, y2, z2; //24 bit

//  // Lets get the deviations from our baseline
//  x_val = (float)myIMU.readFloatAccelX() - (float)myIMU.readFloatAccelX();
//  y_val = (float)myIMU.readFloatAccelY() - (float)myIMU.readFloatAccelY();
//  z_val = (float)myIMU.readFloatAccelZ() - (float)myIMU.readFloatAccelZ();
//
//  // Work out the squares
//  x2 = (uint16_t)(x_val * x_val);
//  y2 = (uint16_t)(y_val * y_val);
//  z2 = (uint16_t)(z_val * z_val);
//
//  //X Axis
//  result = sqrt(y2 + z2);
//  result = x_val / result;
//  myIMU.readFloatAccelX() = atan(result);
//
//  //Y Axis
//  result = sqrt(x2 + z2);
//  result = y_val / result;
//  myIMU.readFloatAccelY() = DEGREES(ATAN(1)); //atan(result);
}
int p_plot_x = 360, p_plot_y = 360;
int scale = 1, p_scale = 5;

void loop() {
  float x_values, y_values, z_values;
  int plot_x, plot_y;
  x_values = myIMU.readFloatAccelX();
  y_values = myIMU.readFloatAccelY();
  z_values = myIMU.readFloatAccelZ();
  plot_x = 360 + scale * (90.0 / 3.1415 * 2 * asin(y_values));
  if (plot_x > 249) plot_x = 249;
  if (plot_x < 69) plot_x = 69;
  plot_y = 360 - scale * (90.0 / 3.1415 * 2 * asin(x_values));
  if (plot_y > 209) plot_y = 209;
  if (plot_y < 29) plot_y = 29;

  Serial.print ("\nPlot X:\n");
  Serial.print (plot_x);
  Serial.print ("\nPlot Y:\n");
  Serial.print (plot_y);
  //Accelerometer
  Serial.print("\nAccelerometer:\n");
  Serial.print(" X1 = ");
  Serial.println(myIMU.readFloatAccelX(), 4);
  Serial.print(" Y1 = ");
  Serial.println(myIMU.readFloatAccelY(), 4);
  Serial.print(" Z1 = ");
  Serial.println(myIMU.readFloatAccelZ(), 4);

  //Gyroscope
  Serial.print("\nGyroscope:\n");
  Serial.print(" X1 = ");
  Serial.println(myIMU.readFloatGyroX(), 4);
  Serial.print(" Y1 = ");
  Serial.println(myIMU.readFloatGyroY(), 4);
  Serial.print(" Z1 = ");
  Serial.println(myIMU.readFloatGyroZ(), 4);

  //Thermometer
  Serial.print("\nThermometer:\n");
  Serial.print(" Degrees C1 = ");
  Serial.println(myIMU.readTempC(), 4);
  Serial.print(" Degrees F1 = ");
  Serial.println(myIMU.readTempF(), 4);

  delay(5000);
}
